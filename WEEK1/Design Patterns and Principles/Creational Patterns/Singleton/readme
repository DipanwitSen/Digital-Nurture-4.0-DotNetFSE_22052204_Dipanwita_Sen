Singleton Pattern is a creational design pattern in Java that ensures only one instance of a class is created during the runtime. 
It provides a global point of access to that single instance. The constructor is made private so that no other class can instantiate it directly. 
The instance is accessed through a static method, usually named getInstance(). 
To make it thread-safe, synchronized keyword or volatile variable can be used. Singleton is commonly used in logging, configuration, caching, or database connection scenarios.

Exercise 1: Implement Singleton Pattern
Create a Java project SingletonPatternExample with a Logger class that ensures only one instance exists using the Singleton pattern. 
Make the constructor private and provide a public static method to get the instance.
Create a test class to verify the same instance is used across the application.
