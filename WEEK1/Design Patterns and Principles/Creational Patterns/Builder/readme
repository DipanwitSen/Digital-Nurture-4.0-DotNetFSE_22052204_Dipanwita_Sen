The Builder Pattern is a creational design pattern used to construct complex objects step by step. 
It separates the construction of an object from its representation, allowing the same process to create different variations. 
It is especially useful when an object has many optional fields. 
The pattern involves a static nested Builder class with setter-like methods returning the builder itself for method chaining.
A final build() method constructs the target object.
This pattern improves code readability, flexibility, and avoids constructor overloading.

Exercise 3: Implementing the Builder Pattern

You are developing a system to create complex objects like a Computer with multiple optional parts.
Create a Java project named BuilderPatternExample.
Define a Computer class with attributes such as CPU, RAM, Storage, and GraphicsCard. 
Implement a static nested Builder class inside Computer that includes setter methods for each attribute and a build() method to construct the final object.
Ensure the Computer class has a private constructor that takes the builder as a parameter. 
Finally, create a test class to demonstrate the creation of different Computer configurations using the Builder Pattern.
