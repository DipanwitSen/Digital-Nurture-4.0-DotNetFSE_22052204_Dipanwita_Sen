LAB2
In Lab 2, we are configuring the core connection between our C# application and the SQL Server database using Entity Framework Core (EF Core).
We define the models for Category and Product to represent the data structure in the database. 
We also create a special class called AppDbContext, which acts as a bridge between our application and the database.
This context tells EF Core which tables to create (Products and Categories) and how to connect to the database using a connection string. 
By setting up this DbContext, we are enabling our application to automatically map C# objects to SQL Server tables, without writing SQL queries manually.

Create the Project:dotnet new console -n RetailInventory
Move into Project Folder:cd RetailInventory
Install EF Core SQL Server Package:dotnet add package Microsoft.EntityFrameworkCore.SqlServer
Install EF Core Design Package:dotnet add package Microsoft.EntityFrameworkCore.Design
Install EF Core CLI Tool:dotnet tool install --global dotnet-ef

LAB3
In Lab 3, we are learning to use the EF Core Command Line Interface (CLI) to manage the structure of the database.
A migration in EF Core is a way to track changes in the database schema over time. We use the CLI to create a migration based on the C# models we defined in Lab 2.
This migration generates SQL scripts automatically for creating the tables. 
After creating the migration, we apply it to the database using the dotnet ef database update command.
This step actually creates the physical tables in the database.
EF Core’s migration system helps us keep the database structure in sync with our C# models as the project grows.

Create Migration:dotnet ef migrations add InitialCreate --project RetailInventory
Apply Migration to Create Database:dotnet ef database update --project RetailInventory
Verify Database:
Open SQL Server Object Explorer
Expand:
(localdb)\MSSQLLocalDB → Databases → RetailStore → Tables
Tables Products and Categories should be visible.

ORM (Object-Relational Mapping):
Maps C# classes (objects) to relational database tables, making database operations simpler and abstracting SQL queries.
Entity Framework Core (EF Core):
A lightweight, cross-platform ORM for .NET that supports LINQ, asynchronous operations, migrations, and modern database features.
Entity Framework Core vs Entity Framework (EF6):
EF Core is faster, modern, and cross-platform. EF6 is older, Windows-only, and less flexible.
EF Core 8.0 Features:
Supports JSON column mapping, improved performance with compiled models, interceptors, and better bulk operations.
Models:
C# classes like Category and Product that define the structure of database tables.
Properties:
Attributes inside models that map to columns in the database, such as Id, Name, and Price.
DbContext:
The class (AppDbContext) that represents a session with the database and tracks entity changes.
DbSet:
Represents a table in the database. Example: DbSet<Product> maps to the Products table.
Connection String:
Defines how to connect to the database. Example:
"Server=(localdb)\\MSSQLLocalDB;Database=RetailStore;Trusted_Connection=True;"
SQL Server LocalDB:
A lightweight, local SQL Server instance used for development.
EF Core CLI:
Command Line Interface tool for managing migrations and database updates.
Migration:
A way to version and apply schema changes. Created using:
dotnet ef migrations add InitialCreate --project RetailInventory
Database Update:
Applies migrations to the database to create or modify tables. Command:
dotnet ef database update --project RetailInventory
AddRangeAsync:
Adds multiple records (products or categories) to the database in a single operation.
SaveChangesAsync:
Commits pending changes to the database.
LINQ (Language Integrated Query):
Query syntax used to filter, retrieve, and manipulate data from the database.
ToListAsync():
Retrieves all records from a table asynchronously.
FindAsync():
Finds a record by primary key (ID).
FirstOrDefaultAsync():
Retrieves the first matching record based on a condition.
Where():
Filters records based on a specified condition.
OrderByDescending():
Sorts records in descending order.
Select():
Projects (transforms) records into new shapes or anonymous objects.
Data Transfer Object (DTO):
Simplified objects used to pass specific data, useful for API responses.
Async and Await:
Keywords used for asynchronous programming to prevent blocking the main thread during database operations.
Update Operations:
Modify existing records by changing property values and saving changes.
Delete Operations:
Remove records using Remove() and SaveChangesAsync().
EF Core Change Tracking:
EF Core automatically tracks added, modified, or deleted entities through the DbContext.





